Values are things that take up memory at runtime.

Methods, packages, types are not values

val ref: Boolean
Can be read as, "ref is a value in the set of Booleans". The compiler sees this logical proposition and tries to validate them. Every type error is a logical contradiction. In that way, the compiler helps us make logical statements so we experiece fewer runtime errors.

Types are logical propositions.

Boolean = { true, false }
Byte = { -128, ..., 127 }
Int = {x | x is an integer that can fit inside 32 bits / 4 bytes }

val UnitValues: Set[Unit] = ???
(), which is a value

val NothingValues: Set[Nothing] = ???
val nothing: Nothing = ???
There is no value of type Nothing. But technically the rhs can be a throw.

Algebraic Data Type is any type that's composed of Sums and Products of other types. The goal, not always attainable, is to define ADTs that make illegal states unrepresentable.

Product Types
 A = { a1, a2, ..., am }
 B = { b1, b2, ..., bn }
 A * B = {
   (a1, b1), (a1, b2), ..., (a1, bn),
   (a2, b1), (a2, b2), ..., (a2, bn),
   ...
   (am, b1), (am, b2), ..., (am, bn),
 }
The size of the set of values
 |A| = n
 |B| = m
 |A * B| = n * m
A tuple is a product type.
 val point: (Int, Int) is a two-way product
 val point: (Int, Int, Int) is a three-way product
case classes are product types with names.

The geometric interpretation of Product Types is using dimensions, cartesean cross products, etc
  
Sum Types
A + B = { x | x : A OR x : B }
      = { a1, a2, ..., an, b1, b2, ..., bm }
It's a union.
|A + B| = n + m
Either is a sum type of two sets.
By convention, |A + A| = 2n because we do not apply a distinct operation. This makes Either a proper sum type.

Either[Either[Int, String]] gets shitty so
sealed trait CoffeePreference
case object Black extends CoffeePreference
case object WithCream extends CoffeePreference
case object WithSugar extends CoffeePreference
case class Both(l: CoffeePreference,
                r: CoffeePreference) extends CoffeePreference
If it's not sealed, it's not a sum type because the number of terms are not fixed. The recursive reference in Both makes this not a (strict) sum type.

Sum types and unions are mostly equivalent. Open unions are infinite and not sum types.

Broad statement: Everything should be final. Sealed traits and final case classes.
Broad statement: Avoid recursion whenever you can. In both types and functions.

sealed trait vs final abstract class
Binary compatibility works better with abstract class.

isomorphism: things have the same information content
bit and boolean

Domain
{ a, b, c}

Codomain
{ x, y }

Function
Mapping of each element of a domain to an element of a codomain.

A method is a function where the type it's defined on is effectively an argument. Keep this hidden parameter in mind. It forms part of the domain of the function.

All functions `f: A => B` satisfy the following properties:
1. Totality: If `a: A`, then `f(a) : B`
2. Determinism: If `a: A`, `b: A`, and `a == b`, then `f(a) == f(b)`
3. Purity. The only effect of evaluating `f(x)` is computing the return value.

Benifits:
No runtime errors.
The type signature is not lying. Is it null? Is the string empty? Do I need a try/catch?
No wondering if it's safe to call.


Broad statement: Try to push decisions higher. Don't try to make them in low level code.

1. no null
2. no exceptions
3. no var
4. no == (Object equals) and a few others
5. no reflection (getClass included)

Use tools like scalafix to enforce these rules.


Parametric polymorphism: functions with type parameters.

JDG considers shadowing GOOD because it removes choice...

Type parameters reduce bugs by limiting the number of possible implementations of the function.

Higher Kinded Types
List is a type constructor. Give it another type, Int, and it returns the type of a list of Int, List[Int]. In constrast, normal constructors are Data Constructors that create Data from Data.
The type of a type, *, is the kind.
Int: *
List: * => *
Option: * => *
Future and Try are also * => * because the Exception type is fixed.
Type level tuple [*, *]
Map: [*, *] => *
Either: [*, *] => *
Tuple2: [*, *] => *

trait Algorithm[Container[_]] {
  def runAlgorithm[A](container: Container[A]): Int = ???
}

val listAlgo : Algorithm[List] = ???
Algorithm is a higher order kind. (* => *) => *
It accepts a type constructor and produces a type constructor.
Data constructors have types, Type constructors have kinds.

trait Foo[A[_], B[_[_]], C[_, _[_], _]]
Foo: [* => *, (* => *) => *, [*, * => *, *] => *] => *


Typeclasses
Scala searches the Data Type companion object and the Implicit type's companion object for instances. Put them in whichever one you control.

trait to definte the typeclass
val/def to define impls for concrete types

Look for three things
1. type parameters that indicate what the typeclass applies to
2. methods that define new operations
3. laws that may be defined in code or scalacheck comments

Parametric polymorphism lets us throw away unneeded type information. Typeclasses let us add back only what's needed. It's this combination that makes statically typed functional programming so productive.

Algebraic data types are types composed from sums and products.

Variance in functional programming:
+ is an input (covariant)
- is an output (contravariant?)

Typeclasses are verbose to implement, but worthwhile because there's a limited number of them per application and the impact is powerful. Most typeclass related code will be instances for additional types, which are quick and simple.


Only require typeclass evidence for methods/operations that require them. Minimum required operations. Sometimes this is unintuitive. For example, you don't need a Hash[A] instance to construct a HashMap because the #hash call is only needed for insert.

Don't use context bounds for syntax classes because, when a type does not have an instance, the error will be "no method found" instead of "there's not typeclass instance".

The thing that makes Nothing special is that it can take any Kind.

F[A]
F is a program, whose instructions are derived from the terms in the F sum type. The program may yield/return one or more values of type A.
A is the Return Value of the program. The program computes A. That's not a guarantee because the instructions in F may allow it to fail (Future, etc).

Semigroup
#combine[A](one: A, two: A): A

Monoid extends Semigroup
#zero: A

Functor
Alter the output of a program
#map[A, B](fa: F[A])(f: A => B): F[B]

Apply
Combine two programs
#zip[A, B](fa: F[A], fb: F[B]): F[(A, B)]
#ap[A, B](fab: F[A => B])(fa: F[A]): F[B]

Applicative extends Apply
Create a program.
#point[A](a: => A): F[A]

Monad
Use the output of one program as the input of the next.
#bind[A, B](fa: F[A])(f: A => F[B]): F[B]
(aka flatMap)

Foldable
#foldRight[A, Z](fa: F[A])(f: (A, Z) => Z): Z
#foldMap[A, B: Monoid](fa: F[A])(f: A => B): B
In theory you derive foldMap from foldRight, but in practice we have to implement both for additional data types.

Traverse extends Foldable with Functor
#traverse[G[_]: Applicative, A, B](
    fa: F[A]
  )(
    f: A => G[B]
  ): G[F[B]]
Get #sequence for free.
Functional zip is the cartesean cross product. This is diff than scala zip, which just pairs elements with the same index and drops any extra.
For things with a sigle thing inside, zip of 3 things gives a tuple3

Monad captures the concept of context sensitive sequential computation.

Traversable is an effectful for loop
forEach[G[_]: Applicative, A, B](
  collection: F[A]
)(
  body: A => G[B]
): G[F[B]]

List(1, 2, 3).forEach { integer =>
  api.getStatus(integer) : Future[Status]
}: Future[List[Status]]

#traverse is a #map followed by a #sequence

Optics
let us zoom in and copy a structure with an edit we define
val org2 = org.department.staff.person.vacationDays -= 3

S T A B
S initial state around the thing, A, that we are editing.
T is the state around the updated thing, B.
The most common case is that S and T are the same and that's the one the class covers.

S is a product type containing field A
Person(name="Joe",vacationDays=18)
Lens[S, A]
get S -> A
set A -> S -> S

Prisms are for Sum Types what Lenses are for Product Types
Where a product type has a lens for every field in the record, a sum type might have a prism depending on which value in the sum you actually get
Prism[S, A]
get S -> Option[A]
set A -> S

Three core optic types
term in product
term in a sum
element in a collection
Everything else is a result of composing those three.

Thunk is a Function0. Useful for making an eager thing lazy.

acquire: IO[E, A]
release: A => IO[Nothing, Unit]
use:     A => IO[E, B]

acquire.bracket(release(_))(use(_))
Release will be called if acquire is and neither will be interupted.

ensuring also has a guarentee that it will not be interupted.

ZIO schedule inputs depend on whether it's passed to IO #repeat or #retry. IO's success values in the former and the error values in the latter.

ZIO's ensuring works across async boundaries where java/scala try/finally does not.

Use bracket for acquire and release.

Final Tagless style let's us abstract over the IO type so code can depend on a subset of the api. Random, Sync, Console, etc
Final Tagless refers to the use of these typeclasses (most of them don't have laws like the monadic hierarchy). Some of these benefits can be had by passing in a function that has the effect needed.
